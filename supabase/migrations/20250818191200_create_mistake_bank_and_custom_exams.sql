-- Migration File: 20250818191200_create_mistake_bank_and_custom_exams.sql

-- 1. Create a new type for the mistake status for better data integrity.
CREATE TYPE public.mistake_status AS ENUM ('unmastered', 'mastered');

-- 2. The core table for our Mistake Notebook feature.
CREATE TABLE public.mistake_bank (
    id BIGSERIAL PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    question_id UUID NOT NULL REFERENCES public.questions(id) ON DELETE CASCADE,
    status public.mistake_status NOT NULL DEFAULT 'unmastered',
    first_mistaken_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    last_reviewed_at TIMESTAMPTZ,
    
    CONSTRAINT user_question_unique UNIQUE (user_id, question_id)
);
COMMENT ON TABLE public.mistake_bank IS 'Stores a persistent record of every question a user has answered incorrectly.';

-- 3. Add a flag to the 'exams' table to differentiate official exams from custom assignments.
ALTER TABLE public.exams
ADD COLUMN IF NOT EXISTS is_custom_assignment BOOLEAN NOT NULL DEFAULT false;
COMMENT ON COLUMN public.exams.is_custom_assignment IS 'True if this exam is a custom assignment generated by an admin.';

-- 4. Create a junction table to link custom exams to their questions.
CREATE TABLE public.exam_questions (
    id BIGSERIAL PRIMARY KEY,
    exam_id UUID NOT NULL REFERENCES public.exams(id) ON DELETE CASCADE,
    question_id UUID NOT NULL REFERENCES public.questions(id) ON DELETE CASCADE,
    
    CONSTRAINT exam_question_unique UNIQUE (exam_id, question_id)
);
COMMENT ON TABLE public.exam_questions IS 'Junction table to associate questions with custom exams/assignments.';

-- 5. Add Indexes for Performance
CREATE INDEX idx_mistake_bank_user_id ON public.mistake_bank(user_id);
CREATE INDEX idx_mistake_bank_status ON public.mistake_bank(status);
CREATE INDEX idx_mistake_bank_first_mistaken_at ON public.mistake_bank(first_mistaken_at);
CREATE INDEX idx_exam_questions_exam_id ON public.exam_questions(exam_id);
CREATE INDEX idx_exam_questions_question_id ON public.exam_questions(question_id);

-- 6. Set up Row Level Security (RLS) for mistake_bank table
ALTER TABLE public.mistake_bank ENABLE ROW LEVEL SECURITY;

-- Students can only view and manage their own mistakes
CREATE POLICY "Students can view their own mistakes" ON public.mistake_bank
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY "Students can insert their own mistakes" ON public.mistake_bank
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Students can update their own mistakes" ON public.mistake_bank
    FOR UPDATE
    USING (auth.uid() = user_id);

-- Admins can view all mistakes for assignment creation
CREATE POLICY "Admins can view all mistakes" ON public.mistake_bank
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' = 'admin'
        )
    );

-- 7. Set up RLS for exam_questions table
ALTER TABLE public.exam_questions ENABLE ROW LEVEL SECURITY;

-- Everyone can read exam_questions (needed for exam display)
CREATE POLICY "Everyone can view exam questions" ON public.exam_questions
    FOR SELECT
    USING (true);

-- Only admins can modify exam_questions
CREATE POLICY "Admins can manage exam questions" ON public.exam_questions
    FOR ALL
    USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND auth.users.raw_user_meta_data->>'role' = 'admin'
        )
    );